#!/usr/bin/env bash
#

GNOSTR=$(which gnostr)

function gnostr-pathappend() {
  for ARG in "$@"
  do
    if [ -d "$ARG" ] && [[ ":$PATH:" != *":$ARG:"* ]]; then
        PATH="${PATH:+"$PATH:"}$ARG"
    fi
  done
}

function gnostr-pathprepend() {
  for ((i=$#; i>0; i--));
  do
    ARG=${!i}
    if [ -d "$ARG" ] && [[ ":$PATH:" != *":$ARG:"* ]]; then
        PATH="$ARG${PATH:+":$PATH"}"
    fi
  done
}

function gnostr-geten0(){
ifconfig en0 | grep --word-regexp inet | awk '{print $2}'
DEVICE=$(ifconfig en0 | grep --color=auto --word-regexp inet | awk '{print $2}') ## && echo $DEVICE
}
function gnostr-geten1(){
ifconfig en1 | grep --word-regexp inet | awk '{print $2}'
DEVICE=$(ifconfig en1 | grep --color=auto --word-regexp inet | awk '{print $2}') ## && echo $DEVICE
}

function gnostr-install-depends(){

    if [[ "$OSTYPE" == "linux-gnu" ]]; then

        if hash apt 2>/dev/null; then

            apt -y install autoconf build-essential          \
                libtool autotools-dev automake               \
                pkg-config bsdmainutils python3              \
                libboost libqrencode libevent-dev            \
                libboost-system-dev libboost-filesystem-dev  \
                libboost-test-dev libboost-thread-dev        \
                libminiupnpc-dev libzmq3-dev libqrencode-dev \
                linuxbrew-wrapper                            \
                wget
        fi

    elif [[ "$OSTYPE" == "darwin"* ]]; then

        if hash brew 2>/dev/null; then

            brew install autoconf automake                   \
                curlpp                                       \
                libevent librsvg libtool                     \
                miniupnpc                                    \
                pkg-config python                            \
                qrencode                                     \
                wget
        else

            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
            gnostr-install-depends
        fi
    fi
}

function gnostr-fetch-branches(){

    $GNOSTR stash && export STASH=true || echo "no stash"
    $GNOSTR branch -q -r || grep -v '\->' || while read remote; \
    do $GNOSTR branch -q "${remote#origin/}" "$remote" || echo skip "$remote"; done
    #$GNOSTR fetch --all  || echo skip && $GNOSTR pull --all || echo skip
    $GNOSTR fetch $1 $2 $3 || echo skip #&& $GNOSTR pull $1 $2 $3 || echo skip
    echo $STASH
    #if [[ $STASH == "true" ]];then echo $STASH; fi || echo nogo
    if [[ $STASH == "true" ]];then $GNOSTR stash list; fi || echo nogo
    #$GNOSTR stash pop || echo "no pop"
}

function gnostr-branch-D (){

if [ -z "$1" ]
    then

    $GNOSTR branch
    echo "try:"
    echo "gnostr-branch-D *string*"
    #$GNOSTR branch -D $($GNOSTR branch --list "$1")

else
    $GNOSTR branch -D "$($GNOSTR branch --list "$1*")"
fi

}
function gnostr-branch-D-r (){

if [ -z "$1" ]
    then

    $GNOSTR branch -r
    echo "try:"
    echo "gnostr-branch-D *string*"
    #$GNOSTR branch -D -r $($GNOSTR branch --list "$1")

else

    $GNOSTR branch -D -r  "$($GNOSTR branch --list -r "$1*")"

fi

}
function gnostr-checkout-b (){

    $GNOSTR checkout -b $(date +%s)/$($GNOSTR rev-parse --short HEAD^1)/$($GNOSTR rev-parse --short HEAD)
    ## TODO use gnostr-weeble gnostr-wobble gnostr-blockheight
    if [ ! -z "$1" ]
    then
        $GNOSTR checkout -b $($GNOSTR rev-parse --abbrev-ref HEAD)-$1
    fi

}


function gnostr-submodule-update--init--recursive (){

    $GNOSTR submodule update --init --recursive

}
#function gnostr-delete-local-branches(){
#
#$GNOSTR branch -D $($GNOSTR branch --list "$1")
#
#}
#function gnostr-delete-remote-branches(){
#
#$GNOSTR branch -r --list $1/* | sed "s/origin\///" | xargs -I {} $GNOSTR push origin --delete {}
#
#}

# Create a new directory and enter it
function gnostr-mkd() {
	mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function gnostr-cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function gnostr-targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Use gnostr’s colored diff when available
hash gnostr &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		$GNOSTR diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function gnostr-dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Start an HTTP server from a directory, optionally specifying the port
function gnostr-server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
    $(which python3) -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Compare original and gzipped file size
function gnostr-gz() {

	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";

}

# Run `dig` and display the most useful info
function gnostr-digga() {

    $(which dig) +nocmd "$1" any +multiline +noall +answer;

}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function gnostr-getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
        | $(which openssl) s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
            | $(which openssl) x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe';
	else
		alias open='xdg-open';
	fi
fi

# `gnostr-open` with no arguments opens the current directory, otherwise opens the given
# location
function gnostr-open() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `gnostr-tree` calls `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function gnostr-tree() {

	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;

}

#REF: https://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux
function gnpstr-showcolors256() {
    local row col blockrow blockcol red green blue
    local showcolor=_showcolor256_${1:-bg}
    local white="\033[1;37m"
    local reset="\033[0m"

    echo -e "Set foreground color: \\\\033[38;5;${white}NNN${reset}m"
    echo -e "Set background color: \\\\033[48;5;${white}NNN${reset}m"
    echo -e "Reset color & style:  \\\\033[0m"
    echo

    echo 16 standard color codes:
    for row in {0..1}; do
        for col in {0..7}; do
            $showcolor $(( row*8 + col )) $row
        done
        echo
    done
    echo

    echo 6·6·6 RGB color codes:
    for blockrow in {0..2}; do
        for red in {0..5}; do
            for blockcol in {0..1}; do
                green=$(( blockrow*2 + blockcol ))
                for blue in {0..5}; do
                    $showcolor $(( red*36 + green*6 + blue + 16 )) $green
                done
                echo -n "  "
            done
            echo
        done
        echo
    done

    echo 24 grayscale color codes:
    for row in {0..1}; do
        for col in {0..11}; do
            $showcolor $(( row*12 + col + 232 )) $row
        done
        echo
    done
    echo
}

function _showcolor256_fg() {
    local code=$( printf %03d $1 )
    echo -ne "\033[38;5;${code}m"
    echo -nE " $code "
    echo -ne "\033[0m"
}

function _showcolor256_bg() {
    if (( $2 % 2 == 0 )); then
        echo -ne "\033[1;37m"
    else
        echo -ne "\033[0;30m"
    fi
    local code=$( printf %03d $1 )
    echo -ne "\033[48;5;${code}m"
    echo -nE " $code "
    echo -ne "\033[0m"
}

function showcolors16() {
    _showcolor "\033[0;30m" "\033[1;30m" "\033[40m" "\033[100m"
    _showcolor "\033[0;31m" "\033[1;31m" "\033[41m" "\033[101m"
    _showcolor "\033[0;32m" "\033[1;32m" "\033[42m" "\033[102m"
    _showcolor "\033[0;33m" "\033[1;33m" "\033[43m" "\033[103m"
    _showcolor "\033[0;34m" "\033[1;34m" "\033[44m" "\033[104m"
    _showcolor "\033[0;35m" "\033[1;35m" "\033[45m" "\033[105m"
    _showcolor "\033[0;36m" "\033[1;36m" "\033[46m" "\033[106m"
    _showcolor "\033[0;37m" "\033[1;37m" "\033[47m" "\033[107m"
}

function _showcolor() {
    for code in "$@"; do
        echo -ne "$code"
        echo -nE "   $code"
        echo -ne "   \033[0m  "
    done
    echo
}


black() {
    echo -e "\033[30m${1}\033[0m"
}

red() {
    echo -e "\033[31m${1}\033[0m"
}

green() {
    echo -e "\033[32m${1}\033[0m"
}

yellow() {
    echo -e "\033[33m${1}\033[0m"
}

blue() {
    echo -e "\033[34m${1}\033[0m"
}

magenta() {
    echo -e "\033[35m${1}\033[0m"
}

cyan() {
    echo -e "\033[36m${1}\033[0m"
}

gray() {
    echo -e "\033[90m${1}\033[0m"
}
