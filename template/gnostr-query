#!/usr/bin/env python3

import os
import subprocess
import sys
import argparse
import json

parser = argparse.ArgumentParser(prog = 'gnostr-query', description = 'Construct gnostr queries')
parser.add_argument('-v', '--version',action='store_true')
parser.add_argument('-a', '--authors')
parser.add_argument('-p', '--mentions')
parser.add_argument('-e', '--references')
parser.add_argument('-t', '--hashtag')
parser.add_argument('-i', '--ids')
parser.add_argument('-k', '--kinds')
parser.add_argument('-g',
                    '--generic',
                    nargs=2,
                    metavar=('tag', 'value'),
                    help="Generic tag query: `#<tag>: value`")
parser.add_argument('-l', '--limit', type=int)
parser.add_argument('--test',action='store_true')

def test():
  print("gnostr-query -i fbf73a17a4e0fe390aba1808a8d55f1b50717d5dd765b2904bf39eba18c51f7c | gnostr-relays")
  cmd = "gnostr-query -i fbf73a17a4e0fe390aba1808a8d55f1b50717d5dd765b2904bf39eba18c51f7c | gnostr-relays"
  #returned_value = os.system(cmd)  # returns the exit code in unix
  #print('returned value:', returned_value)
  returned_value = subprocess.call(cmd, shell=True)  # returns the exit code in unix
  print('returned value:', returned_value)
  sys.exit(0)

def usage():
    parser.print_help()
    sys.exit(0)

args = parser.parse_args()

filt = {}

## gnostr-query -i fbf73a17a4e0fe390aba1808a8d55f1b50717d5dd765b2904bf39eba18c51f7c | gnostr-relays

if args.test is True:
  print("%s",args.test)
  test();

if args.version:
  print('v0.0.0'); exit();

if args.authors:
    filt["authors"] = args.authors.split(",")

if args.ids:
    filt["ids"] = args.ids.split(",")

if args.limit is not None:
    filt["limit"] =largs.limit

if args.generic:
    (tag, val) = args.generic
    filt["#" + tag] = val.split(",")

if args.hashtag is not None:
    filt["#t"] = args.hashtag.split(",")

if args.mentions is not None:
    filt["#p"] = args.mentions.split(",")

if args.references is not None:
    filt["#e"] = args.references.split(",")

if args.kinds is not None:
    kinds = args.kinds.split(",")
    filt["kinds"] = [a for a in map(lambda s: int(s), kinds)]

q = json.dumps(["REQ","gnostr-query",filt])
print(q)
